{"version":3,"sources":["App.tsx","index.tsx"],"names":["classNames","require","goodsWithId","map","good","name","id","self","crypto","randomUUID","SORT_VALUE_NAME","SORT_VALUE_LENGTH","SORT_VALUE_REVERSE","SORT_VALUE_RESET","activeFields","length","reverse","reReverse","reset","initial","canChangeState","previousActivField","Button","text","setSortValue","sortField","buttonClass","button","type","className","onClick","Good","GoodsList","visibleGoods","App","useState","sortValue","goods","Object","keys","key","preperedGoods","sort","good2","localeCompare","getPreperedGoods","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d1b127dc.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n// eslint-disable-next-line\nconst classNames = require('classnames');\n\ninterface GoodWithID {\n  name: string;\n  id: string;\n}\n\ntype ActiveFields = {\n  'name': boolean;\n  'length': boolean;\n  'reverse': boolean;\n  'reReverse': boolean;\n  'reset': boolean;\n  'initial': boolean;\n};\n\ntype PropsForButton = {\n  text: string,\n  setSortValue: (value: keyof ActiveFields) => void,\n  sortField: keyof ActiveFields,\n};\n\ntype PropsForGoodsList = {\n  visibleGoods: GoodWithID[];\n};\n\ntype PropsForGood = {\n  good: GoodWithID;\n};\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst goodsWithId: GoodWithID[] = goodsFromServer.map(good => (\n  {\n    name: good,\n    // eslint-disable-next-line\n    id: self.crypto.randomUUID(),\n  }\n));\n\nconst SORT_VALUE_NAME = 'name';\nconst SORT_VALUE_LENGTH = 'length';\nconst SORT_VALUE_REVERSE = 'reverse';\nconst SORT_VALUE_REREVERSE = 'reReverse';\nconst SORT_VALUE_RESET = 'reset';\n\nconst activeFields: ActiveFields = {\n  name: false,\n  length: false,\n  reverse: false,\n  reReverse: false,\n  reset: false,\n  initial: true,\n};\n\nlet canChangeState = false;\nlet previousActivField = '';\n\nfunction getPreperedGoods(goods: GoodWithID[], sortField: keyof ActiveFields) {\n  previousActivField = sortField;\n\n  // eslint-disable-next-line\n  switch (true) {\n    case sortField === SORT_VALUE_REREVERSE:\n      activeFields.reverse = !activeFields.reverse;\n      break;\n\n    case sortField === SORT_VALUE_NAME && !activeFields.name:\n      activeFields.length = false;\n      canChangeState = true;\n      break;\n\n    case sortField === SORT_VALUE_LENGTH && !activeFields.length:\n      activeFields.name = false;\n      canChangeState = true;\n      break;\n\n    case sortField === SORT_VALUE_REVERSE:\n      canChangeState = true;\n      break;\n\n    case sortField === SORT_VALUE_RESET:\n      activeFields.reset = true;\n  }\n\n  if (canChangeState) {\n    canChangeState = false;\n    activeFields[sortField] = !activeFields[sortField];\n  }\n\n  // eslint-disable-next-line\n  for (const key of Object.keys(activeFields) as Array<keyof typeof activeFields>) {\n    if (activeFields[key] === true) {\n      activeFields.initial = true;\n      break;\n    } else {\n      activeFields.initial = false;\n    }\n  }\n\n  let preperedGoods = [...goods];\n\n  if (activeFields[SORT_VALUE_NAME]) {\n    preperedGoods.sort((good, good2) => (\n      good[SORT_VALUE_NAME].localeCompare(good2[SORT_VALUE_NAME])\n    ));\n  }\n\n  if (activeFields[SORT_VALUE_LENGTH]) {\n    preperedGoods.sort((good, good2) => (\n      good.name[SORT_VALUE_LENGTH] - good2.name[SORT_VALUE_LENGTH]\n    ));\n  }\n\n  if (activeFields[SORT_VALUE_REVERSE]) {\n    preperedGoods.reverse();\n  }\n\n  if (activeFields[SORT_VALUE_RESET]) {\n    activeFields.name = false;\n    activeFields.length = false;\n    activeFields.reverse = false;\n    activeFields.reset = false;\n    activeFields.initial = false;\n    preperedGoods = [...goodsWithId];\n  }\n\n  return preperedGoods;\n}\n\nconst Button:React.FC<PropsForButton> = ({\n  text,\n  setSortValue,\n  sortField,\n}) => {\n  const buttonClass = classNames({\n    button: true,\n    'is-light': !activeFields[sortField],\n    'is-info': sortField === SORT_VALUE_NAME,\n    'is-success': sortField === SORT_VALUE_LENGTH,\n    'is-warning': sortField === SORT_VALUE_REVERSE,\n    'is-danger': sortField === SORT_VALUE_RESET,\n  });\n\n  return (\n    <button\n      type=\"button\"\n      className={buttonClass}\n      onClick={() => {\n        if (sortField === SORT_VALUE_REVERSE\n          && previousActivField === SORT_VALUE_REVERSE) {\n          setSortValue('reReverse');\n        } else {\n          setSortValue(sortField);\n        }\n      }}\n    >\n      {text}\n    </button>\n  );\n};\n\nconst Good:React.FC<PropsForGood> = ({ good }) => (\n  <li data-cy=\"Good\">\n    {good.name}\n  </li>\n);\n\nconst GoodsList:React.FC<PropsForGoodsList> = ({ visibleGoods }) => (\n  <ul>\n    {visibleGoods.map(good => (\n      <Good good={good} key={good.id} />\n    ))}\n  </ul>\n);\n\nexport const App: React.FC = () => {\n  const [sortValue, setSortValue] = useState<keyof ActiveFields>('initial');\n  const visibleGoods = getPreperedGoods(goodsWithId, sortValue);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <Button\n          text=\"Sort alphabetically\"\n          setSortValue={setSortValue}\n          sortField={SORT_VALUE_NAME}\n          // sortValue={sortValue}\n        />\n\n        <Button\n          text=\"Sort by length\"\n          setSortValue={setSortValue}\n          sortField={SORT_VALUE_LENGTH}\n          // sortValue={sortValue}\n        />\n\n        <Button\n          text=\"Reverse\"\n          setSortValue={setSortValue}\n          sortField={SORT_VALUE_REVERSE}\n          // sortValue={sortValue}\n        />\n\n        {activeFields.initial\n          && (\n            <Button\n              text=\"Reset\"\n              setSortValue={setSortValue}\n              sortField={SORT_VALUE_RESET}\n              // sortValue={sortValue}\n            />\n          )}\n      </div>\n\n      <GoodsList visibleGoods={visibleGoods} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}